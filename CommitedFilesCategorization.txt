Greedy - JumpGame(M,goodPosition),meetingRoom(SortArray,pQ),mergeIntervals(sortArray,PQ),bestTimeToBuyAndSellStock(minStock,and maxProfit)

DP- JumpGame(M,forLoop),maximumSubarray(S[i]=max(S[i-1]+arr[i],arr[i]))
    WordBreak(slidingWindow wont work,recursion+for Loop to check all posibility,memo to reduce time complexity)
    CoinChange(recursion+forLoop)
Permutation/Combination-letterCombinationsOfPhoneLetter(forLoop),GenerateParenthesis(forLoop)

String - removeAllAdjacentDuplicates(E,StringBuilder)
SlidingWindow- longestSubStringWithoutRepeatingCharacter(HashMap) , MinimumWindowSubString(HashMap,patCount,dict)
SubString - longestPalindromincSubString(each index as center,func(index,index),func(index,index))

Tree- BTMaximumPathSum(DFS),SerializeAndDeserializeBT(DFS),Diameter(Depth modified,global variable),LCA(left and right not null return node),SpiralTrraverse(2 Stack),
      SymetricTree(DFS,left,right pass as arguments),validateBST(inOrder)
Heap-medianFromStreamOfData(minHeap,MaxHeap),mergeKSortedList(pq)
Stack-minStack(2 stack,linkedList)
List-addTwoNumber(while Loop),ReverseNodeInKGroup(ReverSe Function with limit K,calculate total element first,dummy),
     CloneWithRandomPointer(HashMap or changeStructureoFOriginal List),reverseLinkedList(prev) 
Design-lRU(Map,doublyLinkedList)

selection - MedianOfTwoSortedArray(Binary Searching,Ypos=(X+Y+1)/2-XPos,XPosmin,XPosmax,YPosmin,YPosmax),
            TopKFrequentElement(HashMap,partiton method),KthLargestElement(partition)         
Searching - modifiedBinarySearch(search is sorted parst first)

Array-TwoSum(HashMap or Sort),ThreeSum(TwoSum),FloodFill(2 array),ProductOfArrayAcceptSelf(2 array left and right)
Hashing-GroupAnagram
Matrix- numberOfIslands(DFS,visitedFirstTimeCount),WordSearch(DFS,reach index n-1 of pattern to search)
